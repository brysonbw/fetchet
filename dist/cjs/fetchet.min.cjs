/*! fetchet | (c) 2025 Bryson Ward | MIT License */
"use strict";var y=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var O=Object.prototype.hasOwnProperty;var F=(e,t)=>{for(var n in t)y(e,n,{get:t[n],enumerable:!0})},b=(e,t,n,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of l(t))!O.call(e,r)&&r!==n&&y(e,r,{get:()=>t[r],enumerable:!(o=g(t,r))||o.enumerable});return e};var S=e=>b(y({},"__esModule",{value:!0}),e);var R={};F(R,{FetchetErrorMessage:()=>f,FetchetRequestMethod:()=>c,fetchet:()=>x});module.exports=S(R);var c=(i=>(i.GET="GET",i.POST="POST",i.PUT="PUT",i.DELETE="DELETE",i.PATCH="PATCH",i.OPTIONS="OPTIONS",i.HEAD="HEAD",i))(c||{}),f=(o=>(o.HeadersInvalid="Cannot read Headers",o.UndefinedOrInvalidProperty="Cannot read undefined or invalid properties",o.UnsupportedHTTPMethod="Cannot read HTTP method",o))(f||{});function P(e){if(e==null||!(e instanceof FormData))return;let t={};return e.forEach((n,o)=>{t[o]=n}),JSON.stringify(t)}function m(e){return d(e)==="object"&&e!==null&&Object.prototype.toString.call(e)==="[object Object]"}function h(e){let t=m(e),n=e instanceof URLSearchParams,o="";if(!e||!t&&!n)throw new TypeError("Cannot read undefined or invalid properties (reading 'parameters')");if(t){let r=e;for(let p of Object.keys(r))if(d(r[p])!=="string")throw new TypeError("Cannot read undefined or invalid properties (reading 'parameters' [object])");o=new URLSearchParams(r).toString()}return n&&(o=e.toString()),`?${o}`}function d(e){return typeof e}async function x(e,{parameters:t,method:n="GET",body:o,headers:r,json:p=!0,config:T}={}){let i=t?`${e}${h(t)}`:e;if(n=n.toUpperCase(),Object.keys(c).map(s=>c[s]).indexOf(n)===-1)throw new Error(`Cannot read HTTP method: Unsupported '${n}'`);try{r=new Headers(r)}catch{throw new TypeError(`Cannot read Headers [${r instanceof Headers?"Unreadable Headers":d(r)}]`)}let a=o;p&&a!==void 0&&(a instanceof FormData?a=P(a):m(a)&&(a=JSON.stringify(a))),p&&a!==void 0&&["POST","PUT","PATCH"].indexOf(n)!==-1&&(r.delete("content-type"),r.set("content-type","application/json"));try{let s=await fetch(i,{method:n,body:a,headers:r,...T});if(!s.ok)throw new Error(`${s.status}`);return await s.json()}catch(s){return console.error(s.message),s}}
