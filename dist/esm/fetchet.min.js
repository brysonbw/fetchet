/*! fetchet | (c) 2025 Bryson Ward | MIT License */
var p=(o=>(o.GET="GET",o.POST="POST",o.PUT="PUT",o.DELETE="DELETE",o.PATCH="PATCH",o.OPTIONS="OPTIONS",o.HEAD="HEAD",o))(p||{}),d=(r=>(r.HeadersInvalid="Cannot read Headers",r.UndefinedOrInvalidProperty="Cannot read undefined or invalid properties",r.UnsupportedHTTPMethod="Cannot read HTTP method",r))(d||{});function u(e){if(e==null||!(e instanceof FormData))return;let s={};return e.forEach((t,r)=>{s[r]=t}),JSON.stringify(s)}function y(e){return f(e)==="object"&&e!==null&&Object.prototype.toString.call(e)==="[object Object]"}function m(e){let s=y(e),t=e instanceof URLSearchParams,r="";if(!e||!s&&!t)throw new TypeError("Cannot read undefined or invalid properties (reading 'parameters')");if(s){let n=e;for(let c of Object.keys(n))if(f(n[c])!=="string")throw new TypeError("Cannot read undefined or invalid properties (reading 'parameters' [object])");r=new URLSearchParams(n).toString()}return t&&(r=e.toString()),`?${r}`}function f(e){return typeof e}async function D(e,{parameters:s,method:t="GET",body:r,headers:n,json:c=!0,config:h}={}){let o=s?`${e}${m(s)}`:e;if(t=t.toUpperCase(),Object.keys(p).map(a=>p[a]).indexOf(t)===-1)throw new Error(`Cannot read HTTP method: Unsupported '${t}'`);try{n=new Headers(n)}catch{throw new TypeError(`Cannot read Headers [${n instanceof Headers?"Unreadable Headers":f(n)}]`)}let i=r;c&&i!==void 0&&(i instanceof FormData?i=u(i):y(i)&&(i=JSON.stringify(i))),c&&i!==void 0&&["POST","PUT","PATCH"].indexOf(t)!==-1&&(n.delete("content-type"),n.set("content-type","application/json"));try{let a=await fetch(o,{method:t,body:i,headers:n,...h});if(!a.ok)throw new Error(`${a.status}`);return a}catch(a){return console.error(a.message),a}}export{d as FetchetErrorMessage,p as FetchetRequestMethod,D as fetchet};
